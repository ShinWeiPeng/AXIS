<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AX58200_MotorControl.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AX58200_MotorControl.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 01 10:01:28 2022
<BR><P>
<H3>Maximum Stack Usage =        432 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TMR3_IRQHandler &rArr; MainLoop &rArr; ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[70]">AX58200_FoeError</a> from ax58200_foeappl.o(i.AX58200_FoeError) referenced from ax58200_foeappl.o(i.AX58200_FoeInit)
 <LI><a href="#[6e]">AX58200_FoeRead</a> from ax58200_foeappl.o(i.AX58200_FoeRead) referenced from ax58200_foeappl.o(i.AX58200_FoeInit)
 <LI><a href="#[6f]">AX58200_FoeReadData</a> from ax58200_foeappl.o(i.AX58200_FoeReadData) referenced from ax58200_foeappl.o(i.AX58200_FoeInit)
 <LI><a href="#[71]">AX58200_FoeWrite</a> from ax58200_foeappl.o(i.AX58200_FoeWrite) referenced from ax58200_foeappl.o(i.AX58200_FoeInit)
 <LI><a href="#[72]">AX58200_FoeWriteData</a> from ax58200_foeappl.o(i.AX58200_FoeWriteData) referenced from ax58200_foeappl.o(i.AX58200_FoeInit)
 <LI><a href="#[73]">AX_UART_GetChar</a> from ax_uart.o(i.AX_UART_GetChar) referenced from console.o(i.CONSOLE_Init)
 <LI><a href="#[74]">AX_UART_PutChar</a> from ax_uart.o(i.AX_UART_PutChar) referenced from console.o(i.CONSOLE_Init)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[54]">BPWM0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[55]">BPWM1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[41]">CAN0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[42]">CAN1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[69]">CAN2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[57]">CCAP_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[79]">CIA402CSP_DeInit</a> from cia402csp.o(i.CIA402CSP_DeInit) referenced from cia402csp.o(.data)
 <LI><a href="#[78]">CIA402CSP_Init</a> from cia402csp.o(i.CIA402CSP_Init) referenced from cia402csp.o(.data)
 <LI><a href="#[7a]">CIA402CSP_Run</a> from cia402csp.o(i.CIA402CSP_Run) referenced from cia402csp.o(.data)
 <LI><a href="#[7c]">CIA402HM_DeInit</a> from cia402hm.o(i.CIA402HM_DeInit) referenced from cia402hm.o(.data)
 <LI><a href="#[7b]">CIA402HM_Init</a> from cia402hm.o(i.CIA402HM_Init) referenced from cia402hm.o(.data)
 <LI><a href="#[7d]">CIA402HM_Run</a> from cia402hm.o(i.CIA402HM_Run) referenced from cia402hm.o(.data)
 <LI><a href="#[7f]">CIA402PP_DeInit</a> from cia402pp.o(i.CIA402PP_DeInit) referenced from cia402pp.o(.data)
 <LI><a href="#[7e]">CIA402PP_Init</a> from cia402pp.o(i.CIA402PP_Init) referenced from cia402pp.o(.data)
 <LI><a href="#[80]">CIA402PP_Run</a> from cia402pp.o(i.CIA402PP_Run) referenced from cia402pp.o(.data)
 <LI><a href="#[e]">CKFAIL_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4d]">CRYPTO_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[f]">Default_Handler</a> from startup_m480.o(.text) referenced 14 times from startup_m480.o(RESET)
 <LI><a href="#[34]">EADC00_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[35]">EADC01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[37]">EADC02_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[38]">EADC03_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[65]">EADC10_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[66]">EADC11_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[67]">EADC12_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[68]">EADC13_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5b]">ECAP0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5c]">ECAP1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[60]">EHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4f]">EINT6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5e]">EINT7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4a]">EMAC_RX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[49]">EMAC_TX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23]">EPWM0P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[24]">EPWM0P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[25]">EPWM0P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[27]">EPWM1P0_IRQHandler</a> from mc_it.o(i.EPWM1P0_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[28]">EPWM1P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[29]">EPWM1P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from ax58200_hw.o(i.GPC_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from ax58200_hw.o(i.GPE_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4e]">GPG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5d]">GPH_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from asix_retarget.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6b]">Hard_Fault_Handler</a> from asix_retarget.o(i.Hard_Fault_Handler) referenced from asix_retarget.o(.emb_text)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[58]">I2C2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4b]">I2S0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[75]">MH_VCP_ClassRequest</a> from mchal_husb.o(i.MH_VCP_ClassRequest) referenced from mchal_husb.o(i.MH_VCP_Init)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3f]">OHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4c]">OPA0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[32]">PDMA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[59]">QEI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5a]">QEI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[20]">QSPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3b]">QSPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[81]">Read0x10F8</a> from coeappl.o(i.Read0x10F8) referenced from coeappl.o(.data)
 <LI><a href="#[ae]">Reset_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[43]">SC0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[44]">SC1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[45]">SC2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[47]">SDH0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5f]">SDH1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[56]">SPIM_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_m480.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_m480.o(i.SystemInit) referenced from startup_m480.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from mc_it.o(i.TMR1_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from ax58200_hw.o(i.TMR3_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[62]">TRNG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from ax_uart.o(i.UART0_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[48]">USBD20_IRQHandler</a> from mchal_husb.o(i.USBD20_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[3e]">USBD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[61]">USBOTG20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[40]">USBOTG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[52]">USCI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[53]">USCI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m480.o(.text)
 <LI><a href="#[77]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[ac]">clicmd_CiA402</a> from clicmd.o(i.clicmd_CiA402) referenced from clicmd.o(.data)
 <LI><a href="#[ad]">clicmd_CiA402Help</a> from clicmd.o(i.clicmd_CiA402Help) referenced from clicmd.o(.data)
 <LI><a href="#[86]">clicmd_ClkRegister</a> from clicmd.o(i.clicmd_ClkRegister) referenced from clicmd.o(.data)
 <LI><a href="#[87]">clicmd_ClkRegisterHelp</a> from clicmd.o(i.clicmd_ClkRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[9a]">clicmd_ECAPxRegister</a> from clicmd.o(i.clicmd_ECAPxRegister) referenced from clicmd.o(.data)
 <LI><a href="#[9b]">clicmd_ECAPxRegisterHelp</a> from clicmd.o(i.clicmd_ECAPxRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[9c]">clicmd_EPWMxRegister</a> from clicmd.o(i.clicmd_EPWMxRegister) referenced from clicmd.o(.data)
 <LI><a href="#[9d]">clicmd_EPWMxRegisterHelp</a> from clicmd.o(i.clicmd_EPWMxRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[96]">clicmd_EadcRegister</a> from clicmd.o(i.clicmd_EadcRegister) referenced from clicmd.o(.data)
 <LI><a href="#[97]">clicmd_EadcRegisterHelp</a> from clicmd.o(i.clicmd_EadcRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[a4]">clicmd_EscRegister</a> from clicmd.o(i.clicmd_EscRegister) referenced from clicmd.o(.data)
 <LI><a href="#[a5]">clicmd_EscRegisterHelp</a> from clicmd.o(i.clicmd_EscRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[a8]">clicmd_EscStack</a> from clicmd.o(i.clicmd_EscStack) referenced from clicmd.o(.data)
 <LI><a href="#[a9]">clicmd_EscStackHelp</a> from clicmd.o(i.clicmd_EscStackHelp) referenced from clicmd.o(.data)
 <LI><a href="#[88]">clicmd_FmcRegister</a> from clicmd.o(i.clicmd_FmcRegister) referenced from clicmd.o(.data)
 <LI><a href="#[89]">clicmd_FmcRegisterHelp</a> from clicmd.o(i.clicmd_FmcRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[92]">clicmd_GPIOxRegister</a> from clicmd.o(i.clicmd_GPIOxRegister) referenced from clicmd.o(.data)
 <LI><a href="#[93]">clicmd_GPIOxRegisterHelp</a> from clicmd.o(i.clicmd_GPIOxRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[aa]">clicmd_McStack</a> from clicmd.o(i.clicmd_McStack) referenced from clicmd.o(.data)
 <LI><a href="#[ab]">clicmd_McStackHelp</a> from clicmd.o(i.clicmd_McStackHelp) referenced from clicmd.o(.data)
 <LI><a href="#[94]">clicmd_NvicRegister</a> from clicmd.o(i.clicmd_NvicRegister) referenced from clicmd.o(.data)
 <LI><a href="#[95]">clicmd_NvicRegisterHelp</a> from clicmd.o(i.clicmd_NvicRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[a2]">clicmd_PdiMemoryTest</a> from clicmd.o(i.clicmd_PdiMemoryTest) referenced from clicmd.o(.data)
 <LI><a href="#[a3]">clicmd_PdiMemoryTestHelp</a> from clicmd.o(i.clicmd_PdiMemoryTestHelp) referenced from clicmd.o(.data)
 <LI><a href="#[9e]">clicmd_PdiRead</a> from clicmd.o(i.clicmd_PdiRead) referenced from clicmd.o(.data)
 <LI><a href="#[9f]">clicmd_PdiReadHelp</a> from clicmd.o(i.clicmd_PdiReadHelp) referenced from clicmd.o(.data)
 <LI><a href="#[a6]">clicmd_PdiReset</a> from clicmd.o(i.clicmd_PdiReset) referenced from clicmd.o(.data)
 <LI><a href="#[a7]">clicmd_PdiResetHelp</a> from clicmd.o(i.clicmd_PdiResetHelp) referenced from clicmd.o(.data)
 <LI><a href="#[a0]">clicmd_PdiWrite</a> from clicmd.o(i.clicmd_PdiWrite) referenced from clicmd.o(.data)
 <LI><a href="#[a1]">clicmd_PdiWriteHelp</a> from clicmd.o(i.clicmd_PdiWriteHelp) referenced from clicmd.o(.data)
 <LI><a href="#[98]">clicmd_QEIxRegister</a> from clicmd.o(i.clicmd_QEIxRegister) referenced from clicmd.o(.data)
 <LI><a href="#[99]">clicmd_QEIxRegisterHelp</a> from clicmd.o(i.clicmd_QEIxRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[90]">clicmd_SPIxRegister</a> from clicmd.o(i.clicmd_SPIxRegister) referenced from clicmd.o(.data)
 <LI><a href="#[91]">clicmd_SPIxRegisterHelp</a> from clicmd.o(i.clicmd_SPIxRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[8a]">clicmd_SpimRegister</a> from clicmd.o(i.clicmd_SpimRegister) referenced from clicmd.o(.data)
 <LI><a href="#[8b]">clicmd_SpimRegisterHelp</a> from clicmd.o(i.clicmd_SpimRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[84]">clicmd_SysRegister</a> from clicmd.o(i.clicmd_SysRegister) referenced from clicmd.o(.data)
 <LI><a href="#[85]">clicmd_SysRegisterHelp</a> from clicmd.o(i.clicmd_SysRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[82]">clicmd_SystemReboot</a> from clicmd.o(i.clicmd_SystemReboot) referenced from clicmd.o(.data)
 <LI><a href="#[83]">clicmd_SystemRebootHelp</a> from clicmd.o(i.clicmd_SystemRebootHelp) referenced from clicmd.o(.data)
 <LI><a href="#[8e]">clicmd_TMRxRegister</a> from clicmd.o(i.clicmd_TMRxRegister) referenced from clicmd.o(.data)
 <LI><a href="#[8f]">clicmd_TMRxRegisterHelp</a> from clicmd.o(i.clicmd_TMRxRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[8c]">clicmd_UARTxRegister</a> from clicmd.o(i.clicmd_UARTxRegister) referenced from clicmd.o(.data)
 <LI><a href="#[8d]">clicmd_UARTxRegisterHelp</a> from clicmd.o(i.clicmd_UARTxRegisterHelp) referenced from clicmd.o(.data)
 <LI><a href="#[76]">fputc</a> from asix_retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[6a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[af]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[280]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[281]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[282]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[283]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[284]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asix_retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m480.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CCAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EADC10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EADC11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EADC12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EADC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[215]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PatternGenerator
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[214]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PatternGenerator
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoRes
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0x10F8
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeWriteData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeReadData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeRead
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoUploadSegmentInd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CalcCheckSum
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PatternInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PatternGenerator
</UL>

<P><STRONG><a name="[1e2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSignedCurr_d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetCurr_d
</UL>

<P><STRONG><a name="[285]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ClearLine
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeError
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Task
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiRead
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[288]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegister
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegister
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWrite
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiRead
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegister
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegister
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegister
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegister
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegister
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegister
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegister
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_PutStr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_GetCommandHistory
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ChangePasswd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_Authenticate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegister
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegister
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[229]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CmdExecute
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_AddCommandHistory
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[219]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ChangePasswd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_Authenticate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[121]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_LoadUserAccount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_GetCommandHistory
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ChangePasswd
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_AddCommandHistory
</UL>

<P><STRONG><a name="[267]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CommandProcess
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[28a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[28b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[222]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[28d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c1]"></a>AL_ControlInd</STRONG> (Thumb, 1252 bytes, Stack size 24 bytes, ecatslv.o(i.AL_ControlInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AL_ControlInd &rArr; StartInputHandler &rArr; PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Stop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopMailboxHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopInputHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartOutputHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartMailboxHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartInputHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_GenerateMapping
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_AckErrorInd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEEPROMLoadedState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopOutputHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOutputHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALEventMask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSmSettings
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackToInitTransition
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfEcatError
</UL>

<P><STRONG><a name="[da]"></a>AL_ControlRes</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, ecatslv.o(i.AL_ControlRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AL_ControlRes &rArr; MBX_StopMailboxHandler &rArr; DisableSyncManChannel &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopMailboxHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopInputHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartOutputHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartMailboxHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartInputHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopOutputHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[d6]"></a>APPL_AckErrorInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ax58200_motorcontrol.o(i.APPL_AckErrorInd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[db]"></a>APPL_Application</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ax58200_motorcontrol.o(i.APPL_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = APPL_Application &rArr; CiA402_StateMachine &rArr; CiA402_MotionControl &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_StateMachine
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_Application
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
</UL>

<P><STRONG><a name="[c3]"></a>APPL_GenerateMapping</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, ax58200_motorcontrol.o(i.APPL_GenerateMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APPL_GenerateMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[1f5]"></a>APPL_InputMapping</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ax58200_motorcontrol.o(i.APPL_InputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APPL_InputMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
</UL>

<P><STRONG><a name="[1f6]"></a>APPL_OutputMapping</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, ax58200_motorcontrol.o(i.APPL_OutputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = APPL_OutputMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
</UL>

<P><STRONG><a name="[ce]"></a>APPL_StartInputHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ax58200_motorcontrol.o(i.APPL_StartInputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = APPL_StartInputHandler &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[c6]"></a>APPL_StartMailboxHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ax58200_motorcontrol.o(i.APPL_StartMailboxHandler))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[d3]"></a>APPL_StartOutputHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ax58200_motorcontrol.o(i.APPL_StartOutputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = APPL_StartOutputHandler &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetFaultStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FaultReset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[d0]"></a>APPL_StopInputHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ax58200_motorcontrol.o(i.APPL_StopInputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[c7]"></a>APPL_StopMailboxHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ax58200_motorcontrol.o(i.APPL_StopMailboxHandler))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[d4]"></a>APPL_StopOutputHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ax58200_motorcontrol.o(i.APPL_StopOutputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = APPL_StopOutputHandler &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_LocalError
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[70]"></a>AX58200_FoeError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ax58200_foeappl.o(i.AX58200_FoeError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AX58200_FoeError
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ax58200_foeappl.o(i.AX58200_FoeInit)
</UL>
<P><STRONG><a name="[277]"></a>AX58200_FoeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ax58200_foeappl.o(i.AX58200_FoeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>AX58200_FoeRead</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, ax58200_foeappl.o(i.AX58200_FoeRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AX58200_FoeRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ax58200_foeappl.o(i.AX58200_FoeInit)
</UL>
<P><STRONG><a name="[6f]"></a>AX58200_FoeReadData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ax58200_foeappl.o(i.AX58200_FoeReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AX58200_FoeReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ax58200_foeappl.o(i.AX58200_FoeInit)
</UL>
<P><STRONG><a name="[71]"></a>AX58200_FoeWrite</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ax58200_foeappl.o(i.AX58200_FoeWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AX58200_FoeWrite &rArr; BL_StartDownload &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_StartDownload
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ax58200_foeappl.o(i.AX58200_FoeInit)
</UL>
<P><STRONG><a name="[72]"></a>AX58200_FoeWriteData</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ax58200_foeappl.o(i.AX58200_FoeWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AX58200_FoeWriteData &rArr; BL_Data &rArr; ReadFlashHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ax58200_foeappl.o(i.AX58200_FoeInit)
</UL>
<P><STRONG><a name="[73]"></a>AX_UART_GetChar</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ax_uart.o(i.AX_UART_GetChar))
<BR>[Address Reference Count : 1]<UL><LI> console.o(i.CONSOLE_Init)
</UL>
<P><STRONG><a name="[e8]"></a>AX_UART_Init</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ax_uart.o(i.AX_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AX_UART_Init &rArr; HW_MultiFuncPins &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_ClkSource
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MultiFuncPins
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[74]"></a>AX_UART_PutChar</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ax_uart.o(i.AX_UART_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd_PutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(i.CONSOLE_Init)
</UL>
<P><STRONG><a name="[ef]"></a>AddObjectsToObjDictionary</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, coeappl.o(i.AddObjectsToObjDictionary))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddObjectsToObjDictionary
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_AddObjectToDic
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjDictionaryInit
</UL>

<P><STRONG><a name="[e7]"></a>BL_Data</STRONG> (Thumb, 1594 bytes, Stack size 72 bytes, bootmode.o(i.BL_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BL_Data &rArr; ReadFlashHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashHeader
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareChecksum32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeWriteData
</UL>

<P><STRONG><a name="[fb]"></a>BL_JumpToLdrom</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, bootmode.o(i.BL_JumpToLdrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BL_JumpToLdrom
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetBootSource
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>BL_Start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bootmode.o(i.BL_Start))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[e6]"></a>BL_StartDownload</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bootmode.o(i.BL_StartDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BL_StartDownload &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeWrite
</UL>

<P><STRONG><a name="[ca]"></a>BL_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bootmode.o(i.BL_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[fe]"></a>BSP_PDI_EscRead</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, test.o(i.BSP_PDI_EscRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_PDI_EscRead &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[ff]"></a>BSP_PDI_EscWrite</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, test.o(i.BSP_PDI_EscWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_PDI_EscWrite &rArr; HW_EscWrite &rArr; HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[cb]"></a>BackToInitTransition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ecatslv.o(i.BackToInitTransition))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[79]"></a>CIA402CSP_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cia402csp.o(i.CIA402CSP_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> cia402csp.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>CIA402CSP_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cia402csp.o(i.CIA402CSP_Init))
<BR>[Address Reference Count : 1]<UL><LI> cia402csp.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>CIA402CSP_Run</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cia402csp.o(i.CIA402CSP_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CIA402CSP_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetTargetPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cia402csp.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>CIA402HM_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cia402hm.o(i.CIA402HM_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> cia402hm.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>CIA402HM_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cia402hm.o(i.CIA402HM_Init))
<BR>[Address Reference Count : 1]<UL><LI> cia402hm.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>CIA402HM_Run</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, cia402hm.o(i.CIA402HM_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CIA402HM_Run &rArr; MC_ClearActualPosition &rArr; MI_CalcEncAngle &rArr; MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartHoming
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearActualPosition
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_CheckHomingDone
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CheckTimeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_LocalError
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetTargetPosition
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402_CheckEmulationEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cia402hm.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>CIA402PP_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cia402pp.o(i.CIA402PP_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> cia402pp.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>CIA402PP_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cia402pp.o(i.CIA402PP_Init))
<BR>[Address Reference Count : 1]<UL><LI> cia402pp.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>CIA402PP_Run</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cia402pp.o(i.CIA402PP_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CIA402PP_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetTargetPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cia402pp.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>CIA402_CheckEmulationEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cia402.o(i.CIA402_CheckEmulationEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
</UL>

<P><STRONG><a name="[22d]"></a>CIA402_EmulationControl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cia402.o(i.CIA402_EmulationControl))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
</UL>

<P><STRONG><a name="[123]"></a>CLICMD_GetCmdTable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clicmd.o(i.CLICMD_GetCmdTable))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[124]"></a>CLICMD_GetCmdTableSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clicmd.o(i.CLICMD_GetCmdTableSize))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[17c]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clk.o(i.CLK_DisableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_ClkSource
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TMR_ClkSource
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_ClkSource
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_TmrClkSource
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiClkSource
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmClkSource
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EadcClkSource
</UL>

<P><STRONG><a name="[108]"></a>CLK_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(i.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[17a]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_ClkSource
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TMR_ClkSource
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_ClkSource
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_TmrClkSource
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiClkSource
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmClkSource
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EadcClkSource
</UL>

<P><STRONG><a name="[107]"></a>CLK_EnablePLL</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[20d]"></a>CLK_EnableSysTick</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[20b]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[10b]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetCPUFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_GetCPUFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[10d]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[20c]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(i.CLK_GetHXTFreq))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[230]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(i.CLK_GetLXTFreq))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[233]"></a>CLK_GetModuleClockDivider</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, clk.o(i.CLK_GetModuleClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetModuleClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[232]"></a>CLK_GetModuleClockSource</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, clk.o(i.CLK_GetModuleClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetModuleClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[10e]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, clk.o(i.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[10f]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, clk.o(i.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[10a]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[231]"></a>CLK_GetPMUWKSrc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clk.o(i.CLK_GetPMUWKSrc))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
</UL>

<P><STRONG><a name="[110]"></a>CLK_SetCoreClock</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[111]"></a>CLK_SetHCLK</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[17b]"></a>CLK_SetModuleClock</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_ClkSource
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TMR_ClkSource
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_ClkSource
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_TmrClkSource
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmClkSource
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EadcClkSource
</UL>

<P><STRONG><a name="[109]"></a>CLK_WaitClockReady</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[f0]"></a>COE_AddObjectToDic</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, coeappl.o(i.COE_AddObjectToDic))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddObjectsToObjDictionary
</UL>

<P><STRONG><a name="[112]"></a>COE_ClearObjDictionary</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, coeappl.o(i.COE_ClearObjDictionary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COE_ClearObjDictionary &rArr; COE_RemoveDicEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_RemoveDicEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
</UL>

<P><STRONG><a name="[114]"></a>COE_ContinueInd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ecatcoe.o(i.COE_ContinueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = COE_ContinueInd &rArr; SDOS_SdoInfoInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[1ec]"></a>COE_GetObjectDictionary</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coeappl.o(i.COE_GetObjectDictionary))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectList
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectHandle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetNoOfObjects
</UL>

<P><STRONG><a name="[13c]"></a>COE_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecatcoe.o(i.COE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[118]"></a>COE_Main</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, coeappl.o(i.COE_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = COE_Main &rArr; SDOS_SdoRes &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoRes
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[11b]"></a>COE_ObjDictionaryInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, coeappl.o(i.COE_ObjDictionaryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COE_ObjDictionaryInit &rArr; AddObjectsToObjDictionary
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddObjectsToObjDictionary
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
</UL>

<P><STRONG><a name="[11c]"></a>COE_ObjInit</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, coeappl.o(i.COE_ObjInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = COE_ObjInit &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjDictionaryInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ClearObjDictionary
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[113]"></a>COE_RemoveDicEntry</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, coeappl.o(i.COE_RemoveDicEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = COE_RemoveDicEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ClearObjDictionary
</UL>

<P><STRONG><a name="[11d]"></a>COE_ServiceInd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ecatcoe.o(i.COE_ServiceInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxServiceInd
</UL>

<P><STRONG><a name="[11f]"></a>COE_SyncTimeStamp</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, coeappl.o(i.COE_SyncTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = COE_SyncTimeStamp &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0x10F8
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[1f4]"></a>COE_UpdateSyncErrorStatus</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, coeappl.o(i.COE_UpdateSyncErrorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync0_Isr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
</UL>

<P><STRONG><a name="[120]"></a>CONSOLE_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, console.o(i.CONSOLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CONSOLE_Init &rArr; AX_UART_Init &rArr; HW_MultiFuncPins &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_LoadUserAccount
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLICMD_GetCmdTableSize
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLICMD_GetCmdTable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>CONSOLE_PutMessage</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, console.o(i.CONSOLE_PutMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_PutString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Task
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscWdInfo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscFmmuSmInfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscFeatures
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscDcInfo
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscAlInfo
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowCiA402Dashboard
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegisterUsage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegisterHelp
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegisterDisplay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegister
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegisterUsage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegisterHelp
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegisterDisplay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegister
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWriteUsage
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWriteHelp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiResetHelp
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiReadUsage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiReadHelp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiRead
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTestUsage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTestHelp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegisterUsage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegisterHelp
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegisterDisplay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegister
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStackUsage
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStackHelp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegisterUsage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegisterHelp
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegisterDisplay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegister
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterUsage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterHelp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterDisplay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegister
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscStackHelp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscStack
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegisterUsage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegisterHelp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegisterUsage
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegisterHelp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegisterDisplay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegister
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegisterUsage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegisterHelp
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegisterDisplay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegister
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegisterUsage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegisterHelp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegisterDisplay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegister
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterUsage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterHelp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegister
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402Usage
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402Help
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_HelpMessage
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CmdExecute
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegisterUsage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegisterHelp
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegisterDisplay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegister
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterUsage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterHelp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterDisplay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegister
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SystemRebootHelp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegisterUsage
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegisterHelp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegisterDisplay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegister
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegisterUsage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegisterHelp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegisterDisplay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowTestTemporaryStatus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowTestBuffer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowPdiMemoryTestParameter
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowPdiMemoryTestLog
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMemoryInHex8b
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMcDashboard
</UL>

<P><STRONG><a name="[128]"></a>CONSOLE_Task</STRONG> (Thumb, 564 bytes, Stack size 16 bytes, console.o(i.CONSOLE_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CONSOLE_Task &rArr; console_CommandProcess &rArr; console_CmdExecute &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CommandProcess
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CollectCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ChangePasswd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_Authenticate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20e]"></a>CONSOLE_TimeTick</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, console.o(i.CONSOLE_TimeTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12d]"></a>CheckIfEcatError</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ecatslv.o(i.CheckIfEcatError))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CheckIfEcatError &rArr; AL_ControlInd &rArr; StartInputHandler &rArr; PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[c2]"></a>CheckSmSettings</STRONG> (Thumb, 600 bytes, Stack size 32 bytes, ecatslv.o(i.CheckSmSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CheckSmSettings &rArr; GetSyncMan &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[1f3]"></a>CheckSyncTypeValue</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, objdef.o(i.CheckSyncTypeValue))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
</UL>

<P><STRONG><a name="[dd]"></a>CiA402_Application</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, ax58200_motorcontrol.o(i.CiA402_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CiA402_Application &rArr; CiA402_TransitionAction &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_TransitionAction
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_Application
</UL>

<P><STRONG><a name="[130]"></a>CiA402_Init</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, ax58200_motorcontrol.o(i.CiA402_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CiA402_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>CiA402_LocalError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ax58200_motorcontrol.o(i.CiA402_LocalError))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_MotionControl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
</UL>

<P><STRONG><a name="[131]"></a>CiA402_MotionControl</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, ax58200_motorcontrol.o(i.CiA402_MotionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CiA402_MotionControl &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_LocalError
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetFaultStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetActualVelocity
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetActualTorque
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetActualPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_StateMachine
</UL>

<P><STRONG><a name="[dc]"></a>CiA402_StateMachine</STRONG> (Thumb, 1788 bytes, Stack size 24 bytes, ax58200_motorcontrol.o(i.CiA402_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CiA402_StateMachine &rArr; CiA402_MotionControl &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FaultReset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_MotionControl
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_Application
</UL>

<P><STRONG><a name="[12f]"></a>CiA402_TransitionAction</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ax58200_motorcontrol.o(i.CiA402_TransitionAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CiA402_TransitionAction &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_Application
</UL>

<P><STRONG><a name="[19a]"></a>DAS_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, das.o(i.DAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1a6]"></a>DAS_Run</STRONG> (Thumb, 368 bytes, Stack size 12 bytes, das.o(i.DAS_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAS_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[139]"></a>DC_CheckWatchdog</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, ecatslv.o(i.DC_CheckWatchdog))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_CheckTimer
</UL>

<P><STRONG><a name="[d8]"></a>DisableSyncManChannel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ecatslv.o(i.DisableSyncManChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisableSyncManChannel &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[1b1]"></a>EADC_ConfigSampleModule</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, eadc.o(i.EADC_ConfigSampleModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EADC_ConfigSampleModule
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcRegInit
</UL>

<P><STRONG><a name="[1af]"></a>EADC_Open</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eadc.o(i.EADC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcRegInit
</UL>

<P><STRONG><a name="[136]"></a>ECAT_Application</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ecatappl.o(i.ECAT_Application))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ECAT_Application &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_Application
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCycleTimeMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync0_Isr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[138]"></a>ECAT_CheckTimer</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ecatappl.o(i.ECAT_CheckTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ECAT_CheckTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_CheckWatchdog
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>ECAT_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, ecatslv.o(i.ECAT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ECAT_Init &rArr; ResetALEventMask &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEEPROMLoadedState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
</UL>

<P><STRONG><a name="[13d]"></a>ECAT_Main</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, ecatslv.o(i.ECAT_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[27]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 104 bytes, mc_it.o(i.EPWM1P0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = EPWM1P0_IRQHandler &rArr; MI_FocCurrController &rArr; MI_CalcEncAngle &rArr; MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ClearZeroIntFlag
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWP_DriveCtrl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetTemp_d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetCurr_d
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetBusVoltage_d
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAbzCount
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>EPWM_ClearZeroIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, epwm.o(i.EPWM_ClearZeroIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM1P0_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>EPWM_EnableADCTrigger</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, epwm.o(i.EPWM_EnableADCTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EPWM_EnableADCTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1b5]"></a>EPWM_EnableLoadMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, epwm.o(i.EPWM_EnableLoadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_EnableLoadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1bb]"></a>EPWM_EnableOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, epwm.o(i.EPWM_EnableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1bd]"></a>EPWM_EnableZeroInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, epwm.o(i.EPWM_EnableZeroInt))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1b9]"></a>EPWM_SetClockSource</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, epwm.o(i.EPWM_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EPWM_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1ba]"></a>EPWM_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, epwm.o(i.EPWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[d7]"></a>EnableSyncManChannel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ecatslv.o(i.EnableSyncManChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EnableSyncManChannel &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[f2]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_JumpToLdrom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[f4]"></a>FMC_Erase</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fmc.o(i.FMC_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase_SPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[14a]"></a>FMC_Erase_SPROM</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fmc.o(i.FMC_Erase_SPROM))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
</UL>

<P><STRONG><a name="[247]"></a>FMC_GetBootSource</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fmc.o(i.FMC_GetBootSource))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterDisplay
</UL>

<P><STRONG><a name="[fa]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_JumpToLdrom
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_StartDownload
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[f8]"></a>FMC_Read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fmc.o(i.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashHeader
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareChecksum32
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[14b]"></a>FMC_ReadConfig</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, fmc.o(i.FMC_ReadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_ReadConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterDisplay
</UL>

<P><STRONG><a name="[fc]"></a>FMC_SetBootSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fmc.o(i.FMC_SetBootSource))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_JumpToLdrom
</UL>

<P><STRONG><a name="[f7]"></a>FMC_Write</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fmc.o(i.FMC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[14d]"></a>FOE_Ack</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, foeappl.o(i.FOE_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOE_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Busy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[14c]"></a>FOE_Busy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, foeappl.o(i.FOE_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FOE_Busy &rArr; FOE_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[14e]"></a>FOE_ContinueInd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecatfoe.o(i.FOE_ContinueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FOE_ContinueInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[152]"></a>FOE_Data</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, foeappl.o(i.FOE_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOE_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[153]"></a>FOE_Error</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, foeappl.o(i.FOE_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FOE_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[18c]"></a>FOE_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecatfoe.o(i.FOE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
</UL>

<P><STRONG><a name="[150]"></a>FOE_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, foeappl.o(i.FOE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[14f]"></a>FOE_ServiceInd</STRONG> (Thumb, 698 bytes, Stack size 24 bytes, ecatfoe.o(i.FOE_ServiceInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FOE_ServiceInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Error
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Busy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Ack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxServiceInd
</UL>

<P><STRONG><a name="[151]"></a>FOE_Write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, foeappl.o(i.FOE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOE_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
</UL>

<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ax58200_hw.o(i.GPC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GPC_IRQHandler &rArr; Sync1_Isr &rArr; PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync1_Isr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ax58200_hw.o(i.GPE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GPE_IRQHandler &rArr; Sync0_Isr &rArr; PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync0_Isr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>GPIO_EnableInt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(i.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[167]"></a>GPIO_SetMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SwProtRegInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiRegInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_DebugHwInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcRegInit
</UL>

<P><STRONG><a name="[169]"></a>GPIO_SetPullCtl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetPullCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPullCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SwProtRegInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiRegInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_DebugHwInit
</UL>

<P><STRONG><a name="[168]"></a>GPIO_SetSlewCtl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetSlewCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetSlewCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SwProtRegInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiRegInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_DebugHwInit
</UL>

<P><STRONG><a name="[188]"></a>GetOutOfMbxQueue</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mailbox.o(i.GetOutOfMbxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetOutOfMbxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
</UL>

<P><STRONG><a name="[12e]"></a>GetSyncMan</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecatslv.o(i.GetSyncMan))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetSyncMan &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSmSettings
</UL>

<P><STRONG><a name="[15a]"></a>GetSystemTimeDelay</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ecatappl.o(i.GetSystemTimeDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCycleTimeMeasurement
</UL>

<P><STRONG><a name="[21c]"></a>HSUSBD_CtrlIn</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, hsusbd.o(i.HSUSBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_CtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>HSUSBD_CtrlOut</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hsusbd.o(i.HSUSBD_CtrlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSUSBD_CtrlOut
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_ClassRequest
</UL>

<P><STRONG><a name="[15c]"></a>HSUSBD_GetDescriptor</STRONG> (Thumb, 704 bytes, Stack size 20 bytes, hsusbd.o(i.HSUSBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
</UL>

<P><STRONG><a name="[1c2]"></a>HSUSBD_Open</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hsusbd.o(i.HSUSBD_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSUSBD_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Init
</UL>

<P><STRONG><a name="[15d]"></a>HSUSBD_PrepareCtrlIn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hsusbd.o(i.HSUSBD_PrepareCtrlIn))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_GetDescriptor
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_ClassRequest
</UL>

<P><STRONG><a name="[15e]"></a>HSUSBD_ProcessSetupPacket</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hsusbd.o(i.HSUSBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HSUSBD_ProcessSetupPacket &rArr; HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_StandardRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HSUSBD_StandardRequest</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, hsusbd.o(i.HSUSBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[1ce]"></a>HSUSBD_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hsusbd.o(i.HSUSBD_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Run
</UL>

<P><STRONG><a name="[21b]"></a>HSUSBD_SwReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hsusbd.o(i.HSUSBD_SwReset))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[21d]"></a>HSUSBD_UpdateDeviceState</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, hsusbd.o(i.HSUSBD_UpdateDeviceState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HSUSBD_UpdateDeviceState
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HW_CheckTimeout</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ax58200_hw.o(i.HW_CheckTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_WaitFlagStateUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[de]"></a>HW_EscRead</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_EscRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_SyncTimeStamp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiWaitReady
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPhyRead
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CheckVendorProductID
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterruptRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartInputHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEEPROMLoadedState
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALEventMask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfEcatError
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscWdInfo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscFmmuSmInfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscFeatures
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscDcInfo
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscAlInfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiRead
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PDI_EscRead
</UL>

<P><STRONG><a name="[15b]"></a>HW_EscReadIsr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_EscReadIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_GetInterruptRegister
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
</UL>

<P><STRONG><a name="[100]"></a>HW_EscWrite</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_EscWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HW_EscWrite &rArr; HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPhyWrite
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPhyRead
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPdiAccess
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetALEventMask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWrite
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiReset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PDI_EscWrite
</UL>

<P><STRONG><a name="[163]"></a>HW_EscWriteIsr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_EscWriteIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HW_EscWriteIsr &rArr; HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
</UL>

<P><STRONG><a name="[171]"></a>HW_GPIO_PinToIntrNum</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, ax58200_hw.o(i.HW_GPIO_PinToIntrNum))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[155]"></a>HW_GPIO_WritePin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ax58200_hw.o(i.HW_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPE_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[13f]"></a>HW_GetALEventRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ax58200_hw.o(i.HW_GetALEventRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HW_GetALEventRegister &rArr; GetInterruptRegister &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInterruptRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[164]"></a>HW_GetALEventRegister_Isr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ax58200_hw.o(i.HW_GetALEventRegister_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_GetInterruptRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync0_Isr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
</UL>

<P><STRONG><a name="[242]"></a>HW_GetDebugCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ax58200_hw.o(i.HW_GetDebugCounter))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowCiA402Dashboard
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscStack
</UL>

<P><STRONG><a name="[166]"></a>HW_Init</STRONG> (Thumb, 970 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HW_Init &rArr; HW_MiiPhyWrite &rArr; HW_MiiWaitReady &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSlewCtl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullCtl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TMR_ClkSource
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MultiFuncPins
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPhyWrite
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPhyRead
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPdiAccess
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_WritePin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_PinToIntrNum
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CheckVendorProductID
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>HW_MiiPdiAccess</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_MiiPdiAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HW_MiiPdiAccess &rArr; HW_EscWrite &rArr; HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[16f]"></a>HW_MiiPhyRead</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ax58200_hw.o(i.HW_MiiPhyRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HW_MiiPhyRead &rArr; HW_MiiWaitReady &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiWaitReady
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[170]"></a>HW_MiiPhyWrite</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ax58200_hw.o(i.HW_MiiPhyWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HW_MiiPhyWrite &rArr; HW_MiiWaitReady &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiWaitReady
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[176]"></a>HW_MiiWaitReady</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ax58200_hw.o(i.HW_MiiWaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HW_MiiWaitReady &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPhyWrite
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MiiPhyRead
</UL>

<P><STRONG><a name="[eb]"></a>HW_MultiFuncPins</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, ax58200_hw.o(i.HW_MultiFuncPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HW_MultiFuncPins &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_Init
</UL>

<P><STRONG><a name="[177]"></a>HW_Release</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ax58200_hw.o(i.HW_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_Release &rArr; HW_SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>HW_SPI_ClkSource</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_SPI_ClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_SPI_ClkSource &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[16b]"></a>HW_TMR_ClkSource</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_TMR_ClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_TMR_ClkSource &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[ea]"></a>HW_UART_ClkSource</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, ax58200_hw.o(i.HW_UART_ClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_UART_ClkSource &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_Init
</UL>

<P><STRONG><a name="[137]"></a>HandleCycleTimeMeasurement</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ecatappl.o(i.HandleCycleTimeMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
</UL>

<P><STRONG><a name="[6b]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, asix_retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asix_retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[142]"></a>MBX_CheckAndCopyMailbox</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, mailbox.o(i.MBX_CheckAndCopyMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MBX_CheckAndCopyMailbox &rArr; MBX_MailboxWriteInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[154]"></a>MBX_CopyToSendMailbox</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mailbox.o(i.MBX_CopyToSendMailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxRepeatReq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>

<P><STRONG><a name="[13b]"></a>MBX_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mailbox.o(i.MBX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MBX_Init &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[140]"></a>MBX_MailboxReadInd</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, mailbox.o(i.MBX_MailboxReadInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MBX_MailboxReadInd &rArr; COE_ContinueInd &rArr; SDOS_SdoInfoInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfMbxQueue
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ContinueInd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[141]"></a>MBX_MailboxRepeatReq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mailbox.o(i.MBX_MailboxRepeatReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MBX_MailboxRepeatReq &rArr; EnableSyncManChannel &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[115]"></a>MBX_MailboxSendReq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mailbox.o(i.MBX_MailboxSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInMbxQueue
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CopyToSendMailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoRes
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ContinueInd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
</UL>

<P><STRONG><a name="[187]"></a>MBX_MailboxWriteInd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mailbox.o(i.MBX_MailboxWriteInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MBX_MailboxWriteInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInMbxQueue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
</UL>

<P><STRONG><a name="[13e]"></a>MBX_Main</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mailbox.o(i.MBX_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MailboxServiceInd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfMbxQueue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
</UL>

<P><STRONG><a name="[c5]"></a>MBX_StartMailboxHandler</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, mailbox.o(i.MBX_StartMailboxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MBX_StartMailboxHandler &rArr; EnableSyncManChannel &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[c8]"></a>MBX_StopMailboxHandler</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, mailbox.o(i.MBX_StopMailboxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MBX_StopMailboxHandler &rArr; DisableSyncManChannel &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SODS_ClearPendingResponse
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOutOfMbxQueue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[106]"></a>MC_CheckHomingDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc.o(i.MC_CheckHomingDone))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
</UL>

<P><STRONG><a name="[105]"></a>MC_ClearActualPosition</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mc.o(i.MC_ClearActualPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MC_ClearActualPosition &rArr; MI_CalcEncAngle &rArr; MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_CalcEncAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[e0]"></a>MC_FaultReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc.o(i.MC_FaultReset))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_StateMachine
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartOutputHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
</UL>

<P><STRONG><a name="[134]"></a>MC_GetActualPosition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc.o(i.MC_GetActualPosition))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_MotionControl
</UL>

<P><STRONG><a name="[132]"></a>MC_GetActualTorque</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc.o(i.MC_GetActualTorque))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_MotionControl
</UL>

<P><STRONG><a name="[133]"></a>MC_GetActualVelocity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc.o(i.MC_GetActualVelocity))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_MotionControl
</UL>

<P><STRONG><a name="[df]"></a>MC_GetFaultStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc.o(i.MC_GetFaultStatus))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_MotionControl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartOutputHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMcDashboard
</UL>

<P><STRONG><a name="[e2]"></a>MC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc.o(i.MC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_TransitionAction
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_StateMachine
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowCiA402Dashboard
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMcDashboard
</UL>

<P><STRONG><a name="[18e]"></a>MC_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, mc.o(i.MC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MC_Init &rArr; MH_TimRegInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapSpdBlkInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapPwmBlkInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapProtectBlkInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapPosBlkInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapCmdBlkInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapAmpBlkInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapAdcBlkInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapAbzBlkInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetFlashParamsAreaData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_MapUvwBlkInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_MapAngBlkInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_TimRegInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SwProtRegInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiRegInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_DebugHwInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcRegInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAS_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>MC_SetTargetPosition</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc.o(i.MC_SetTargetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402PP_Run
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402CSP_Run
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[103]"></a>MC_StartHoming</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc.o(i.MC_StartHoming))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[135]"></a>MC_StartMotor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc.o(i.MC_StartMotor))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_StateMachine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[e3]"></a>MC_StopMotor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc.o(i.MC_StopMotor))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_TransitionAction
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_StateMachine
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[1a4]"></a>MC_TaskRun</STRONG> (Thumb, 724 bytes, Stack size 16 bytes, mc.o(i.MC_TaskRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MC_TaskRun &rArr; MC_ClearActualPosition &rArr; MI_CalcEncAngle &rArr; MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearActualPosition
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Run
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWP_Run
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM_VectorAlignment
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM_RunStepping
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_PiController
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAS_Run
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>MC_TickRun</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mc.o(i.MC_TickRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC_TickRun
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM_TickRun
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e1]"></a>MH_AdcConv</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, mchal_eadc.o(i.MH_AdcConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MH_AdcConv
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetTemp_d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetCurr_d
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetBusVoltage_d
</UL>

<P><STRONG><a name="[19e]"></a>MH_AdcRegInit</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mchal_eadc.o(i.MH_AdcRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MH_AdcRegInit &rArr; MH_EadcClkSource &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_Open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_ConfigSampleModule
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SetMFP
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EadcClkSource
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_BitToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1b0]"></a>MH_BitToNum</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, mchal_misc.o(i.MH_BitToNum))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcRegInit
</UL>

<P><STRONG><a name="[1b3]"></a>MH_ClkTick_1ms</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mchal_misc.o(i.MH_ClkTick_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWP_Run
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_Delay_1ms
</UL>

<P><STRONG><a name="[1a3]"></a>MH_DebugHwInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, mchal_gpio.o(i.MH_DebugHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MH_DebugHwInit &rArr; MH_SetMFP
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSlewCtl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullCtl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SetMFP
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1b2]"></a>MH_Delay_1ms</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mchal_misc.o(i.MH_Delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MH_Delay_1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_ClkTick_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWP_Run
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
</UL>

<P><STRONG><a name="[1b6]"></a>MH_EPWMSetCntType</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mchal_epwm.o(i.MH_EPWMSetCntType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MH_EPWMSetCntType
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1ad]"></a>MH_EadcClkSource</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mchal_misc.o(i.MH_EadcClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MH_EadcClkSource &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcRegInit
</UL>

<P><STRONG><a name="[1b4]"></a>MH_EpwmClkSource</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mchal_misc.o(i.MH_EpwmClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MH_EpwmClkSource &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1a0]"></a>MH_EpwmRegInit</STRONG> (Thumb, 710 bytes, Stack size 32 bytes, mchal_epwm.o(i.MH_EpwmRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MH_EpwmRegInit &rArr; MH_EpwmClkSource &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Start
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_SetClockSource
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableZeroInt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableOutput
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableLoadMode
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableADCTrigger
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSlewCtl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullCtl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmClkSource
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmSetOutMode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmSetCntMode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EPWMSetCntType
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SetMFP
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1b7]"></a>MH_EpwmSetCntMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mchal_epwm.o(i.MH_EpwmSetCntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MH_EpwmSetCntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1b8]"></a>MH_EpwmSetOutMode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mchal_epwm.o(i.MH_EpwmSetOutMode))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
</UL>

<P><STRONG><a name="[1be]"></a>MH_QeiClkSource</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mchal_misc.o(i.MH_QeiClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MH_QeiClkSource &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiRegInit
</UL>

<P><STRONG><a name="[1a1]"></a>MH_QeiRegInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, mchal_qei.o(i.MH_QeiRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MH_QeiRegInit &rArr; MH_QeiClkSource &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI_Start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSlewCtl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullCtl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiClkSource
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SetMFP
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1ae]"></a>MH_SetMFP</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, mchal_misc.o(i.MH_SetMFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MH_SetMFP
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SwProtRegInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiRegInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_EpwmRegInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_DebugHwInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcRegInit
</UL>

<P><STRONG><a name="[19f]"></a>MH_SwProtRegInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, mchal_gpio.o(i.MH_SwProtRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MH_SwProtRegInit &rArr; MH_SetMFP
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSlewCtl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullCtl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_SetMFP
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1a2]"></a>MH_TimRegInit</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, mchal_tim.o(i.MH_TimRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MH_TimRegInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_TmrClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1c0]"></a>MH_TmrClkSource</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mchal_misc.o(i.MH_TmrClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MH_TmrClkSource &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_TimRegInit
</UL>

<P><STRONG><a name="[19d]"></a>MH_VCP_Init</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, mchal_husb.o(i.MH_VCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MH_VCP_Init &rArr; MH_VCP_SetupEndpoints &rArr; HSUSBD_ConfigEp
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_Open
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_SetupEndpoints
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpBufAddr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1cd]"></a>MH_VCP_Run</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mchal_husb.o(i.MH_VCP_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MH_VCP_Run &rArr; MH_VCP_Recv &rArr; esc_doCommand &rArr; putD &rArr; putH
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_Start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>MI_CalcEncAngle</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, mc_math.o(i.MI_CalcEncAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MI_CalcEncAngle &rArr; MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_GetEncAngle_AbzMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearActualPosition
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>

<P><STRONG><a name="[1d1]"></a>MI_CalcRotorVector</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, mc_math.o(i.MI_CalcRotorVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MI_CalcRotorVector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_GetSIN
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>

<P><STRONG><a name="[1d4]"></a>MI_Clake</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mc_math.o(i.MI_Clake))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MI_Clake
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>

<P><STRONG><a name="[148]"></a>MI_FocCurrController</STRONG> (Thumb, 202 bytes, Stack size 104 bytes, mc_math.o(i.MI_FocCurrController))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MI_FocCurrController &rArr; MI_CalcEncAngle &rArr; MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_SetPhaseVoltage
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSignedCurr_d
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_RevPark
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_Park
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_Clake
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_CalcRotorVector
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_PiController
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_CalcEncAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM1P0_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>MI_GetEncAngle_AbzMode</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mc_math.o(i.MI_GetEncAngle_AbzMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_CalcEncAngle
</UL>

<P><STRONG><a name="[194]"></a>MI_MapAngBlkInit</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mc_math.o(i.MI_MapAngBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[193]"></a>MI_MapUvwBlkInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mc_math.o(i.MI_MapUvwBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1d5]"></a>MI_Park</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, mc_math.o(i.MI_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MI_Park
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>

<P><STRONG><a name="[1d6]"></a>MI_RevPark</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, mc_math.o(i.MI_RevPark))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MI_RevPark
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_GetSIN
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>

<P><STRONG><a name="[147]"></a>MS_GetAbzCount</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, incremental_fdbk.o(i.MS_GetAbzCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_GetAbzCount &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Brake
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM1P0_IRQHandler
</UL>

<P><STRONG><a name="[1dd]"></a>MS_GetAvBusVoltage_V</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sw_protection.o(i.MS_GetAvBusVoltage_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_GetAvBusVoltage_V
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetBusVoltage_V
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWP_Run
</UL>

<P><STRONG><a name="[207]"></a>MS_GetAvI2T_V</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, sw_protection.o(i.MS_GetAvI2T_V))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWP_Run
</UL>

<P><STRONG><a name="[1df]"></a>MS_GetAvTemp_V</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sw_protection.o(i.MS_GetAvTemp_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_GetAvTemp_V
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetTemp_V
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWP_Run
</UL>

<P><STRONG><a name="[1de]"></a>MS_GetBusVoltage_V</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bus_vol_sensor.o(i.MS_GetBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAvBusVoltage_V
</UL>

<P><STRONG><a name="[145]"></a>MS_GetBusVoltage_d</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bus_vol_sensor.o(i.MS_GetBusVoltage_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_GetBusVoltage_d &rArr; MH_AdcConv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcConv
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM1P0_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>MS_GetCurr_d</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, curr_fdbk.o(i.MS_GetCurr_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MS_GetCurr_d &rArr; MH_AdcConv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcConv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM1P0_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>MS_GetFlashParamsAreaData</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, flash.o(i.MS_GetFlashParamsAreaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MS_GetFlashParamsAreaData &rArr; MS_UpdateMap &rArr; esc_doCommand &rArr; putD &rArr; putH
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_UpdateMap
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadFlashRom
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1d3]"></a>MS_GetSignedCurr_d</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, curr_fdbk.o(i.MS_GetSignedCurr_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_GetSignedCurr_d
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>

<P><STRONG><a name="[1e0]"></a>MS_GetTemp_V</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, temp_sensor.o(i.MS_GetTemp_V))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAvTemp_V
</UL>

<P><STRONG><a name="[146]"></a>MS_GetTemp_d</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, temp_sensor.o(i.MS_GetTemp_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_GetTemp_d &rArr; MH_AdcConv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_AdcConv
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM1P0_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>MS_MapAbzBlkInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, incremental_fdbk.o(i.MS_MapAbzBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[190]"></a>MS_MapAdcBlkInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bus_vol_sensor.o(i.MS_MapAdcBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[199]"></a>MS_MapAmpBlkInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pid.o(i.MS_MapAmpBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_PiController
</UL>

<P><STRONG><a name="[196]"></a>MS_MapCmdBlkInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, loop_control.o(i.MS_MapCmdBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[197]"></a>MS_MapPosBlkInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pid.o(i.MS_MapPosBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_PiController
</UL>

<P><STRONG><a name="[19b]"></a>MS_MapProtectBlkInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sw_protection.o(i.MS_MapProtectBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[191]"></a>MS_MapPwmBlkInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, svpwm.o(i.MS_MapPwmBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[198]"></a>MS_MapSpdBlkInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pid.o(i.MS_MapSpdBlkInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_PiController
</UL>

<P><STRONG><a name="[1a8]"></a>MS_PiController</STRONG> (Thumb, 642 bytes, Stack size 8 bytes, pid.o(i.MS_PiController))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_PiController
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapSpdBlkInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapPosBlkInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_MapAmpBlkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[1d7]"></a>MS_SetPhaseVoltage</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, svpwm.o(i.MS_SetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_SetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_FocCurrController
</UL>

<P><STRONG><a name="[18a]"></a>MailboxServiceInd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mailbox.o(i.MailboxServiceInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ServiceInd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_Main
</UL>

<P><STRONG><a name="[1e5]"></a>MainInit</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ecatappl.o(i.MainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MainInit &rArr; ECAT_Init &rArr; ResetALEventMask &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ObjInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>MainLoop</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ecatappl.o(i.MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MainLoop &rArr; ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_SyncTimeStamp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Main
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIfEcatError
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>OBJ_CopyNumberToString</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, objdef.o(i.OBJ_CopyNumberToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OBJ_CopyNumberToString
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
</UL>

<P><STRONG><a name="[1e9]"></a>OBJ_GetDesc</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, objdef.o(i.OBJ_GetDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OBJ_GetDesc &rArr; OBJ_CopyNumberToString
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_CopyNumberToString
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[1ed]"></a>OBJ_GetEntryDesc</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, objdef.o(i.OBJ_GetEntryDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OBJ_GetEntryDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetNoOfObjects
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[1f1]"></a>OBJ_GetEntryOffset</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, objdef.o(i.OBJ_GetEntryOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OBJ_GetEntryOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
</UL>

<P><STRONG><a name="[1eb]"></a>OBJ_GetNoOfObjects</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, objdef.o(i.OBJ_GetNoOfObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OBJ_GetNoOfObjects &rArr; OBJ_GetEntryDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_GetObjectDictionary
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[1fb]"></a>OBJ_GetObjDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, objdef.o(i.OBJ_GetObjDesc))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[1ee]"></a>OBJ_GetObjectHandle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, objdef.o(i.OBJ_GetObjectHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OBJ_GetObjectHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_GetObjectDictionary
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[1f7]"></a>OBJ_GetObjectLength</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, objdef.o(i.OBJ_GetObjectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OBJ_GetObjectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[1ef]"></a>OBJ_GetObjectList</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, objdef.o(i.OBJ_GetObjectList))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OBJ_GetObjectList &rArr; OBJ_GetEntryDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_GetObjectDictionary
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInfoInd
</UL>

<P><STRONG><a name="[1f0]"></a>OBJ_Read</STRONG> (Thumb, 1140 bytes, Stack size 80 bytes, objdef.o(i.OBJ_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OBJ_Read &rArr; OBJ_GetEntryOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryOffset
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[1f2]"></a>OBJ_Write</STRONG> (Thumb, 1310 bytes, Stack size 88 bytes, objdef.o(i.OBJ_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OBJ_Write &rArr; OBJ_GetEntryOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryOffset
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSyncTypeValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[156]"></a>PDI_Isr</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, ecatappl.o(i.PDI_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PDI_Isr &rArr; PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_UpdateSyncErrorStatus
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister_Isr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_OutputMapping
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
</UL>

<P><STRONG><a name="[1e8]"></a>PDO_InputMapping</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecatappl.o(i.PDO_InputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister_Isr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWriteIsr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_InputMapping
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync1_Isr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sync0_Isr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInputHandler
</UL>

<P><STRONG><a name="[1e7]"></a>PDO_OutputMapping</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ecatappl.o(i.PDO_OutputMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PDO_OutputMapping &rArr; HandleCycleTimeMeasurement &rArr; GetSystemTimeDelay &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_OutputMapping
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCycleTimeMeasurement
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDI_Isr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[189]"></a>PutInMbxQueue</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mailbox.o(i.PutInMbxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutInMbxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>

<P><STRONG><a name="[1bf]"></a>QEI_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qei.o(i.QEI_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_QeiRegInit
</UL>

<P><STRONG><a name="[81]"></a>Read0x10F8</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, coeappl.o(i.Read0x10F8))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Read0x10F8 &rArr; COE_SyncTimeStamp &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_SyncTimeStamp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coeappl.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>ResetALEventMask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ecatslv.o(i.ResetALEventMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ResetALEventMask &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopInputHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[11e]"></a>SDOS_SdoInd</STRONG> (Thumb, 1112 bytes, Stack size 72 bytes, sdoserv.o(i.SDOS_SdoInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoRes
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoUploadSegmentInd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectLength
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectHandle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ServiceInd
</UL>

<P><STRONG><a name="[117]"></a>SDOS_SdoInfoInd</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, sdoserv.o(i.SDOS_SdoInfoInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SDOS_SdoInfoInd &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectList
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjectHandle
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetObjDesc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetNoOfObjects
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetEntryDesc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_GetDesc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ServiceInd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
</UL>

<P><STRONG><a name="[11a]"></a>SDOS_SdoRes</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, sdoserv.o(i.SDOS_SdoRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SDOS_SdoRes &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoRes
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Main
</UL>

<P><STRONG><a name="[18b]"></a>SODS_ClearPendingResponse</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, sdoserv.o(i.SODS_ClearPendingResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SODS_ClearPendingResponse &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
</UL>

<P><STRONG><a name="[1fc]"></a>SPIM_EraseBlock</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, spim.o(i.SPIM_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPIM_EraseBlock &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_wait_write_done
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[201]"></a>SPIM_IO_Read</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, spim.o(i.SPIM_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIM_IO_Read &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[204]"></a>SPIM_IO_Write</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, spim.o(i.SPIM_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[17f]"></a>SPI_ClearRxFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ClearRxFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[180]"></a>SPI_ClearTxFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ClearTxFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[17d]"></a>SPI_Close</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, spi.o(i.SPI_Close))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_DeInit
</UL>

<P><STRONG><a name="[17e]"></a>SPI_DisableAutoSS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_DisableAutoSS))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[185]"></a>SPI_DisableInt</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, spi.o(i.SPI_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[182]"></a>SPI_Open</STRONG> (Thumb, 692 bytes, Stack size 40 bytes, spi.o(i.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[181]"></a>SPI_SetFIFO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(i.SPI_SetFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[18f]"></a>STPM_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepper_mode.o(i.STPM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STPM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
</UL>

<P><STRONG><a name="[1a9]"></a>STPM_RunStepping</STRONG> (Thumb, 562 bytes, Stack size 0 bytes, stepper_mode.o(i.STPM_RunStepping))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[1ac]"></a>STPM_TickRun</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stepper_mode.o(i.STPM_TickRun))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TickRun
</UL>

<P><STRONG><a name="[1aa]"></a>STPM_VectorAlignment</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, stepper_mode.o(i.STPM_VectorAlignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STPM_VectorAlignment &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[149]"></a>SWP_DriveCtrl</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, sw_protection.o(i.SWP_DriveCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM1P0_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>SWP_Run</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, sw_protection.o(i.SWP_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWP_Run &rArr; MS_GetAvTemp_V
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_Delay_1ms
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_ClkTick_1ms
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAvTemp_V
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAvI2T_V
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAvBusVoltage_V
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[1fa]"></a>SdoRes</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, sdoserv.o(i.SdoRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoRes
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[cf]"></a>SetALEventMask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ecatslv.o(i.SetALEventMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SetALEventMask &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[d9]"></a>SetALStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ecatslv.o(i.SetALStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SetALStatus &rArr; HW_EscWrite &rArr; HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[cd]"></a>StartInputHandler</STRONG> (Thumb, 1496 bytes, Stack size 56 bytes, ecatslv.o(i.StartInputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = StartInputHandler &rArr; PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSyncMan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSyncManChannel
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[d2]"></a>StartOutputHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ecatslv.o(i.StartOutputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[d1]"></a>StopInputHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ecatslv.o(i.StopInputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = StopInputHandler &rArr; ResetALEventMask &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetALEventMask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSyncManChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[d5]"></a>StopOutputHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ecatslv.o(i.StopOutputHandler))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlRes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
</UL>

<P><STRONG><a name="[158]"></a>Sync0_Isr</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, ecatappl.o(i.Sync0_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sync0_Isr &rArr; PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_UpdateSyncErrorStatus
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister_Isr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Application
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPE_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>Sync1_Isr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ecatappl.o(i.Sync1_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sync1_Isr &rArr; PDO_InputMapping &rArr; HW_GetALEventRegister_Isr &rArr; ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDO_InputMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
</UL>

<P><STRONG><a name="[20a]"></a>SysInit</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, main.o(i.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysInit &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHXTFreq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableSysTick
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; MC_TickRun
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Timer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TickRun
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_TimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system_m480.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, system_m480.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[1dc]"></a>TC_Brake</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_Brake))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAbzCount
</UL>

<P><STRONG><a name="[195]"></a>TC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, trajectory_ctrl.o(i.TC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TC_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Run
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[1a7]"></a>TC_Run</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, trajectory_ctrl.o(i.TC_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TC_Run &rArr; TC_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_SpeedCurveGenerator
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[210]"></a>TC_SpeedCurveGenerator</STRONG> (Thumb, 750 bytes, Stack size 12 bytes, trajectory_ctrl.o(i.TC_SpeedCurveGenerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TC_SpeedCurveGenerator
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Run
</UL>

<P><STRONG><a name="[218]"></a>TEST_CtrlTime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test.o(i.TEST_CtrlTime))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[25a]"></a>TEST_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, test.o(i.TEST_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowPdiMemoryTestLog
</UL>

<P><STRONG><a name="[211]"></a>TEST_Init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, test.o(i.TEST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TEST_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ResetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[213]"></a>TEST_PatternGenerator</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, test.o(i.TEST_PatternGenerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TEST_PatternGenerator
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[216]"></a>TEST_PatternInit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, test.o(i.TEST_PatternInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TEST_PatternInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[217]"></a>TEST_PdiMemoryTest</STRONG> (Thumb, 736 bytes, Stack size 24 bytes, test.o(i.TEST_PdiMemoryTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TEST_PdiMemoryTest &rArr; BSP_PDI_EscRead &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ResetTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PatternInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PatternGenerator
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_CtrlTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PDI_EscWrite
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PDI_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
</UL>

<P><STRONG><a name="[212]"></a>TEST_ResetTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test.o(i.TEST_ResetTime))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
</UL>

<P><STRONG><a name="[20f]"></a>TEST_Timer</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, test.o(i.TEST_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[21a]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterDisplay
</UL>

<P><STRONG><a name="[16c]"></a>TIMER_Open</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_TimRegInit
</UL>

<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mc_it.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMR1_IRQHandler &rArr; MC_TaskRun &rArr; MC_ClearActualPosition &rArr; MI_CalcEncAngle &rArr; MI_GetEncAngle_AbzMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ax58200_hw.o(i.TMR3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = TMR3_IRQHandler &rArr; MainLoop &rArr; ECAT_Main &rArr; MBX_Main &rArr; MailboxServiceInd &rArr; COE_ServiceInd &rArr; SDOS_SdoInd &rArr; SdoRes &rArr; MBX_MailboxSendReq &rArr; MBX_CopyToSendMailbox &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_CheckTimer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ax_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UART_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_Init
</UL>

<P><STRONG><a name="[ee]"></a>UART_Open</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_Init
</UL>

<P><STRONG><a name="[ec]"></a>UART_Read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(i.UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_Init
</UL>

<P><STRONG><a name="[48]"></a>USBD20_IRQHandler</STRONG> (Thumb, 1144 bytes, Stack size 24 bytes, mchal_husb.o(i.USBD20_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD20_IRQHandler &rArr; HSUSBD_ProcessSetupPacket &rArr; HSUSBD_StandardRequest &rArr; HSUSBD_GetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_UpdateDeviceState
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SwReset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ProcessSetupPacket
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_CtrlIn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_SetupEndpoints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>UpdateEEPROMLoadedState</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ecatslv.o(i.UpdateEEPROMLoadedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UpdateEEPROMLoadedState &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AL_ControlInd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECAT_Init
</UL>

<P><STRONG><a name="[21e]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Run
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_StartDownload
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_GetEncAngle_AbzMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_CalcRotorVector
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetAbzCount
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM_VectorAlignment
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_CalcEncAngle
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_TaskRun
</UL>

<P><STRONG><a name="[290]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[291]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[220]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[292]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[293]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[294]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[126]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>

<P><STRONG><a name="[295]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[296]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[297]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1cb]"></a>esc_doCommand</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, servo_commu.o(i.esc_doCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = esc_doCommand &rArr; putD &rArr; putH
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putERR
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putD
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCommand
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVariable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getD
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommand
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_UpdateMap
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
</UL>

<P><STRONG><a name="[76]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, asix_retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[119]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_Main
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoUploadSegmentInd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdoDownloadSegmentInd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SODS_ClearPendingResponse
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxWriteInd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StopMailboxHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_MailboxReadInd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOE_ServiceInd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; HW_Init &rArr; HW_MiiPhyWrite &rArr; HW_MiiWaitReady &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Run
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Release
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Task
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_JumpToLdrom
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX58200_FoeInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[116]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_StartMailboxHandler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBX_CheckAndCopyMailbox
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COE_ContinueInd
</UL>

<P><STRONG><a name="[e1]"></a>printd</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, printd.o(i.printd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd_PutString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402HM_Run
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_ClkSource
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TMR_ClkSource
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_ClkSource
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MultiFuncPins
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_WaitFlagStateUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_TransmitReceive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_TransitionAction
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_StateMachine
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_MotionControl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_Application
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StopOutputHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPL_StartOutputHandler
</UL>

<P><STRONG><a name="[227]"></a>printdCtrl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, printd.o(i.printdCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[208]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, asix_retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[209]"></a>SendChar_ToUART</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, asix_retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[186]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, asix_retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[206]"></a>SPIM_ReadStatusRegister</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spim.o(i.SPIM_ReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_read
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitInput
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_is_write_done
</UL>

<P><STRONG><a name="[205]"></a>SPIM_WriteInPageDataByIo</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, spim.o(i.SPIM_WriteInPageDataByIo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_wait_write_done
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Write
</UL>

<P><STRONG><a name="[202]"></a>SwitchNBitInput</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, spim.o(i.SwitchNBitInput))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
</UL>

<P><STRONG><a name="[1fe]"></a>SwitchNBitOutput</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, spim.o(i.SwitchNBitOutput))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
</UL>

<P><STRONG><a name="[27e]"></a>spim_is_write_done</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spim.o(i.spim_is_write_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_wait_write_done
</UL>

<P><STRONG><a name="[203]"></a>spim_read</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, spim.o(i.spim_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spim_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
</UL>

<P><STRONG><a name="[1fd]"></a>spim_set_write_enable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spim.o(i.spim_set_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spim_set_write_enable &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchNBitOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
</UL>

<P><STRONG><a name="[200]"></a>spim_wait_write_done</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spim.o(i.spim_wait_write_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_is_write_done
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
</UL>

<P><STRONG><a name="[1ff]"></a>spim_write</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, spim.o(i.spim_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_set_write_enable
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_WriteInPageDataByIo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_ReadStatusRegister
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
</UL>

<P><STRONG><a name="[159]"></a>GetInterruptRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ax58200_hw.o(i.GetInterruptRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetInterruptRegister &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister
</UL>

<P><STRONG><a name="[160]"></a>HW_CheckVendorProductID</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ax58200_hw.o(i.HW_CheckVendorProductID))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HW_CheckVendorProductID &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[178]"></a>HW_SPI_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ax58200_hw.o(i.HW_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Release
</UL>

<P><STRONG><a name="[16a]"></a>HW_SPI_Init</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, ax58200_hw.o(i.HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HW_SPI_Init &rArr; HW_MultiFuncPins &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSlewCtl
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPullCtl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetFIFO
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableAutoSS
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearTxFIFO
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearRxFIFO
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_ClkSource
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MultiFuncPins
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[161]"></a>HW_SPI_Read</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, ax58200_hw.o(i.HW_SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_TransmitReceive
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
</UL>

<P><STRONG><a name="[183]"></a>HW_SPI_TransmitReceive</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, ax58200_hw.o(i.HW_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CheckTimeout
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Read
</UL>

<P><STRONG><a name="[184]"></a>HW_SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ax58200_hw.o(i.HW_SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[162]"></a>HW_SPI_Write</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, ax58200_hw.o(i.HW_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_TransmitReceive
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWriteIsr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>

<P><STRONG><a name="[165]"></a>ISR_GetInterruptRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ax58200_hw.o(i.ISR_GetInterruptRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ISR_GetInterruptRegister &rArr; HW_EscReadIsr &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscReadIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetALEventRegister_Isr
</UL>

<P><STRONG><a name="[175]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ax58200_hw.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[173]"></a>NVIC_EncodePriority</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, ax58200_hw.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[174]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ax58200_hw.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[16d]"></a>TIMER_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ax58200_hw.o(i.TIMER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[f6]"></a>FirmwareChecksum32</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, bootmode.o(i.FirmwareChecksum32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FirmwareChecksum32
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[fd]"></a>NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bootmode.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_JumpToLdrom
</UL>

<P><STRONG><a name="[f5]"></a>ReadFlashHeader</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bootmode.o(i.ReadFlashHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadFlashHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[f3]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bootmode.o(i.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_JumpToLdrom
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashHeader
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareChecksum32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_StartDownload
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[f1]"></a>SYS_UnlockReg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bootmode.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_JumpToLdrom
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashHeader
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareChecksum32
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_StartDownload
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BL_Data
</UL>

<P><STRONG><a name="[1f8]"></a>SdoDownloadSegmentInd</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, sdoserv.o(i.SdoDownloadSegmentInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SdoDownloadSegmentInd &rArr; OBJ_Write &rArr; OBJ_GetEntryOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBJ_Write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[1f9]"></a>SdoUploadSegmentInd</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, sdoserv.o(i.SdoUploadSegmentInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdoUploadSegmentInd &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOS_SdoInd
</UL>

<P><STRONG><a name="[1d2]"></a>MI_GetSIN</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, mc_math.o(i.MI_GetSIN))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_RevPark
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MI_CalcRotorVector
</UL>

<P><STRONG><a name="[1d8]"></a>MS_CalcCheckSum</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, flash.o(i.MS_CalcCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_CalcCheckSum &rArr; MS_ReadFlashRom
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Swap
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadFlashRom
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CheckSignature
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetFlashParamsAreaData
</UL>

<P><STRONG><a name="[1da]"></a>MS_CheckSignature</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash.o(i.MS_CheckSignature))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CalcCheckSum
</UL>

<P><STRONG><a name="[1e4]"></a>MS_GetLineData</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, flash.o(i.MS_GetLineData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_GetLineData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_UpdateMap
</UL>

<P><STRONG><a name="[1d9]"></a>MS_ReadFlashRom</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash.o(i.MS_ReadFlashRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_ReadFlashRom
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CalcCheckSum
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetFlashParamsAreaData
</UL>

<P><STRONG><a name="[1db]"></a>MS_Swap</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flash.o(i.MS_Swap))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_CalcCheckSum
</UL>

<P><STRONG><a name="[1e3]"></a>MS_UpdateMap</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, flash.o(i.MS_UpdateMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MS_UpdateMap &rArr; esc_doCommand &rArr; putD &rArr; putH
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetLineData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetFlashParamsAreaData
</UL>

<P><STRONG><a name="[26d]"></a>getCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, servo_commu.o(i.getCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getCommand &rArr; putERR &rArr; putS
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putERR
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMAP
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDAS
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
</UL>

<P><STRONG><a name="[26f]"></a>getD</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, servo_commu.o(i.getD))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
</UL>

<P><STRONG><a name="[272]"></a>getDAS</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, servo_commu.o(i.getDAS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getDAS
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommand
</UL>

<P><STRONG><a name="[275]"></a>getField</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, servo_commu.o(i.getField))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getField
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVariable
</UL>

<P><STRONG><a name="[274]"></a>getFields</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, servo_commu.o(i.getFields))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getFields
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVariable
</UL>

<P><STRONG><a name="[276]"></a>getInteger</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, servo_commu.o(i.getInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getInteger
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVariable
</UL>

<P><STRONG><a name="[271]"></a>getMAP</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, servo_commu.o(i.getMAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getMAP
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommand
</UL>

<P><STRONG><a name="[273]"></a>getTable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, servo_commu.o(i.getTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getTable &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVariable
</UL>

<P><STRONG><a name="[26b]"></a>getVariable</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, servo_commu.o(i.getVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getVariable &rArr; getTable &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTable
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInteger
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFields
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getField
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
</UL>

<P><STRONG><a name="[27b]"></a>putC</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, servo_commu.o(i.putC))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putS
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putH
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putD
</UL>

<P><STRONG><a name="[26c]"></a>putCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, servo_commu.o(i.putCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = putCommand &rArr; putERR &rArr; putS
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putMAP
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putERR
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putDAS
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
</UL>

<P><STRONG><a name="[270]"></a>putD</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, servo_commu.o(i.putD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = putD &rArr; putH
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putH
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putC
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
</UL>

<P><STRONG><a name="[27a]"></a>putDAS</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, servo_commu.o(i.putDAS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = putDAS
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCommand
</UL>

<P><STRONG><a name="[26e]"></a>putERR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, servo_commu.o(i.putERR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putERR &rArr; putS
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putS
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCommand
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCommand
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
</UL>

<P><STRONG><a name="[27c]"></a>putH</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, servo_commu.o(i.putH))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putH
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putC
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putD
</UL>

<P><STRONG><a name="[279]"></a>putMAP</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, servo_commu.o(i.putMAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = putMAP
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putCommand
</UL>

<P><STRONG><a name="[27d]"></a>putS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, servo_commu.o(i.putS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = putS
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putC
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putERR
</UL>

<P><STRONG><a name="[1cf]"></a>HSUSBD_ConfigEp</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mchal_husb.o(i.HSUSBD_ConfigEp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_SetupEndpoints
</UL>

<P><STRONG><a name="[1c3]"></a>HSUSBD_SetEpBufAddr</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mchal_husb.o(i.HSUSBD_SetEpBufAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSUSBD_SetEpBufAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_SetupEndpoints
</UL>

<P><STRONG><a name="[75]"></a>MH_VCP_ClassRequest</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, mchal_husb.o(i.MH_VCP_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MH_VCP_ClassRequest &rArr; HSUSBD_CtrlOut
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_PrepareCtrlIn
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_CtrlOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mchal_husb.o(i.MH_VCP_Init)
</UL>
<P><STRONG><a name="[1c9]"></a>MH_VCP_ParseCommandLine</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, mchal_husb.o(i.MH_VCP_ParseCommandLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MH_VCP_ParseCommandLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
</UL>

<P><STRONG><a name="[1c8]"></a>MH_VCP_PutChar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mchal_husb.o(i.MH_VCP_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
</UL>

<P><STRONG><a name="[1c5]"></a>MH_VCP_PutStr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mchal_husb.o(i.MH_VCP_PutStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MH_VCP_PutStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
</UL>

<P><STRONG><a name="[1c7]"></a>MH_VCP_Recv</STRONG> (Thumb, 632 bytes, Stack size 32 bytes, mchal_husb.o(i.MH_VCP_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MH_VCP_Recv &rArr; esc_doCommand &rArr; putD &rArr; putH
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_doCommand
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Xmit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_StrToInt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_PutStr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_PutChar
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_ParseCommandLine
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_Delay_1ms
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_ClkTick_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Run
</UL>

<P><STRONG><a name="[1c4]"></a>MH_VCP_SetupEndpoints</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, mchal_husb.o(i.MH_VCP_SetupEndpoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MH_VCP_SetupEndpoints &rArr; HSUSBD_ConfigEp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_SetEpBufAddr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSUSBD_ConfigEp
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD20_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>MH_VCP_StrToInt</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, mchal_husb.o(i.MH_VCP_StrToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MH_VCP_StrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
</UL>

<P><STRONG><a name="[1cc]"></a>MH_VCP_Xmit</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, mchal_husb.o(i.MH_VCP_Xmit))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MH_VCP_Recv
</UL>

<P><STRONG><a name="[246]"></a>FMC_ReadUCID</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, clicmd.o(i.FMC_ReadUCID))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterDisplay
</UL>

<P><STRONG><a name="[245]"></a>FMC_ReadUID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clicmd.o(i.FMC_ReadUID))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterDisplay
</UL>

<P><STRONG><a name="[ac]"></a>clicmd_CiA402</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, clicmd.o(i.clicmd_CiA402))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = clicmd_CiA402 &rArr; clicmd_ShowCiA402Dashboard &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIA402_EmulationControl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FaultReset
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowCiA402Dashboard
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_DecText2Long
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_DecText2Char
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402Usage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printdCtrl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>clicmd_CiA402Help</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_CiA402Help))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_CiA402Help &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402Usage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[228]"></a>clicmd_CiA402Usage</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_CiA402Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_CiA402Usage &rArr; clicmd_CiA402Help &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402Help
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
</UL>

<P><STRONG><a name="[86]"></a>clicmd_ClkRegister</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_ClkRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = clicmd_ClkRegister &rArr; clicmd_ClkRegisterUsage &rArr; clicmd_ClkRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterUsage
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterDisplay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[22f]"></a>clicmd_ClkRegisterDisplay</STRONG> (Thumb, 1896 bytes, Stack size 16 bytes, clicmd.o(i.clicmd_ClkRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_ClkRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHXTFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPMUWKSrc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockDivider
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetLXTFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegister
</UL>

<P><STRONG><a name="[87]"></a>clicmd_ClkRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_ClkRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_ClkRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[22e]"></a>clicmd_ClkRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_ClkRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_ClkRegisterUsage &rArr; clicmd_ClkRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegister
</UL>

<P><STRONG><a name="[22c]"></a>clicmd_DecText2Char</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_DecText2Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clicmd_DecText2Char
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
</UL>

<P><STRONG><a name="[22b]"></a>clicmd_DecText2Long</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_DecText2Long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clicmd_DecText2Long
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_DecText2SignLong
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
</UL>

<P><STRONG><a name="[234]"></a>clicmd_DecText2SignLong</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_DecText2SignLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clicmd_DecText2SignLong &rArr; clicmd_DecText2Long
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_DecText2Long
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[9a]"></a>clicmd_ECAPxRegister</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_ECAPxRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_ECAPxRegister &rArr; clicmd_ECAPxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegisterUsage
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegisterDisplay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[237]"></a>clicmd_ECAPxRegisterDisplay</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_ECAPxRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_ECAPxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegister
</UL>

<P><STRONG><a name="[9b]"></a>clicmd_ECAPxRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_ECAPxRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_ECAPxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[236]"></a>clicmd_ECAPxRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_ECAPxRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_ECAPxRegisterUsage &rArr; clicmd_ECAPxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegister
</UL>

<P><STRONG><a name="[9c]"></a>clicmd_EPWMxRegister</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_EPWMxRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = clicmd_EPWMxRegister &rArr; clicmd_EPWMxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegisterUsage
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegisterDisplay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[239]"></a>clicmd_EPWMxRegisterDisplay</STRONG> (Thumb, 2232 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_EPWMxRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clicmd_EPWMxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegister
</UL>

<P><STRONG><a name="[9d]"></a>clicmd_EPWMxRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_EPWMxRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_EPWMxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[238]"></a>clicmd_EPWMxRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_EPWMxRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_EPWMxRegisterUsage &rArr; clicmd_EPWMxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegister
</UL>

<P><STRONG><a name="[96]"></a>clicmd_EadcRegister</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_EadcRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clicmd_EadcRegister &rArr; clicmd_EadcRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegisterUsage
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegisterDisplay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[23b]"></a>clicmd_EadcRegisterDisplay</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_EadcRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_EadcRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegister
</UL>

<P><STRONG><a name="[97]"></a>clicmd_EadcRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_EadcRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_EadcRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[23a]"></a>clicmd_EadcRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_EadcRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_EadcRegisterUsage &rArr; clicmd_EadcRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegister
</UL>

<P><STRONG><a name="[a4]"></a>clicmd_EscRegister</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_EscRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = clicmd_EscRegister &rArr; clicmd_ShowEscDcInfo &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscWdInfo
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscFmmuSmInfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscFeatures
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscDcInfo
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowEscAlInfo
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegisterUsage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>clicmd_EscRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_EscRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_EscRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[23c]"></a>clicmd_EscRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_EscRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_EscRegisterUsage &rArr; clicmd_EscRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
</UL>

<P><STRONG><a name="[a8]"></a>clicmd_EscStack</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_EscStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_EscStack &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetDebugCounter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>clicmd_EscStackHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_EscStackHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_EscStackHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>clicmd_FmcRegister</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_FmcRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = clicmd_FmcRegister &rArr; clicmd_FmcRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterUsage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterDisplay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[244]"></a>clicmd_FmcRegisterDisplay</STRONG> (Thumb, 1854 bytes, Stack size 48 bytes, clicmd.o(i.clicmd_FmcRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = clicmd_FmcRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetBootSource
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadUID
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadUCID
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegister
</UL>

<P><STRONG><a name="[89]"></a>clicmd_FmcRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_FmcRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_FmcRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[243]"></a>clicmd_FmcRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_FmcRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_FmcRegisterUsage &rArr; clicmd_FmcRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegister
</UL>

<P><STRONG><a name="[92]"></a>clicmd_GPIOxRegister</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_GPIOxRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_GPIOxRegister &rArr; clicmd_GPIOxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegisterUsage
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegisterDisplay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[249]"></a>clicmd_GPIOxRegisterDisplay</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_GPIOxRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_GPIOxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegister
</UL>

<P><STRONG><a name="[93]"></a>clicmd_GPIOxRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_GPIOxRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_GPIOxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[248]"></a>clicmd_GPIOxRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_GPIOxRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_GPIOxRegisterUsage &rArr; clicmd_GPIOxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegister
</UL>

<P><STRONG><a name="[235]"></a>clicmd_HexText2Char</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_HexText2Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clicmd_HexText2Char
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegister
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegister
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWrite
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegister
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegister
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegister
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[22a]"></a>clicmd_HexText2Long</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_HexText2Long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clicmd_HexText2Long
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegister
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegister
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWrite
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiRead
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegister
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_GPIOxRegister
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_FmcRegister
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EadcRegister
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EPWMxRegister
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ECAPxRegister
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ClkRegister
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegister
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegister
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[aa]"></a>clicmd_McStack</STRONG> (Thumb, 1150 bytes, Stack size 56 bytes, clicmd.o(i.clicmd_McStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = clicmd_McStack &rArr; clicmd_ShowMcDashboard &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartHoming
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearActualPosition
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetTargetPosition
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FaultReset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStackUsage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_DecText2SignLong
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_DecText2Long
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printdCtrl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMcDashboard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>clicmd_McStackHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_McStackHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_McStackHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStackUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[24b]"></a>clicmd_McStackUsage</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_McStackUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_McStackUsage &rArr; clicmd_McStackHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStackHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[94]"></a>clicmd_NvicRegister</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_NvicRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clicmd_NvicRegister &rArr; clicmd_NvicRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegisterUsage
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegisterDisplay
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[24d]"></a>clicmd_NvicRegisterDisplay</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_NvicRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_NvicRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegister
</UL>

<P><STRONG><a name="[95]"></a>clicmd_NvicRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_NvicRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_NvicRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[24c]"></a>clicmd_NvicRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_NvicRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_NvicRegisterUsage &rArr; clicmd_NvicRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_NvicRegister
</UL>

<P><STRONG><a name="[a2]"></a>clicmd_PdiMemoryTest</STRONG> (Thumb, 1200 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_PdiMemoryTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = clicmd_PdiMemoryTest &rArr; TEST_PdiMemoryTest &rArr; BSP_PDI_EscRead &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTestUsage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_DecText2Long
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_PdiMemoryTest
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowTestTemporaryStatus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowTestBuffer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowPdiMemoryTestParameter
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowPdiMemoryTestLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>clicmd_PdiMemoryTestHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_PdiMemoryTestHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_PdiMemoryTestHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTestUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[251]"></a>clicmd_PdiMemoryTestUsage</STRONG> (Thumb, 1474 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_PdiMemoryTestUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_PdiMemoryTestUsage &rArr; clicmd_PdiMemoryTestHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTestHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
</UL>

<P><STRONG><a name="[9e]"></a>clicmd_PdiRead</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_PdiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = clicmd_PdiRead &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiReadUsage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMemoryInHex8b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>clicmd_PdiReadHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_PdiReadHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_PdiReadHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiReadUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[253]"></a>clicmd_PdiReadUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_PdiReadUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_PdiReadUsage &rArr; clicmd_PdiReadHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiReadHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiRead
</UL>

<P><STRONG><a name="[a6]"></a>clicmd_PdiReset</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_PdiReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = clicmd_PdiReset &rArr; HW_EscWrite &rArr; HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>clicmd_PdiResetHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_PdiResetHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_PdiResetHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>clicmd_PdiWrite</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_PdiWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = clicmd_PdiWrite &rArr; HW_EscWrite &rArr; HW_SPI_Write &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscWrite
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWriteUsage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMemoryInHex8b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>clicmd_PdiWriteHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_PdiWriteHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_PdiWriteHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWriteUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[255]"></a>clicmd_PdiWriteUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_PdiWriteUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_PdiWriteUsage &rArr; clicmd_PdiWriteHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWriteHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWrite
</UL>

<P><STRONG><a name="[98]"></a>clicmd_QEIxRegister</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_QEIxRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_QEIxRegister &rArr; clicmd_QEIxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegisterUsage
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegisterDisplay
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[257]"></a>clicmd_QEIxRegisterDisplay</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_QEIxRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_QEIxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegister
</UL>

<P><STRONG><a name="[99]"></a>clicmd_QEIxRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_QEIxRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_QEIxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[256]"></a>clicmd_QEIxRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_QEIxRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_QEIxRegisterUsage &rArr; clicmd_QEIxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_QEIxRegister
</UL>

<P><STRONG><a name="[90]"></a>clicmd_SPIxRegister</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_SPIxRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_SPIxRegister &rArr; clicmd_SPIxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegisterUsage
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegisterDisplay
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[259]"></a>clicmd_SPIxRegisterDisplay</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_SPIxRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_SPIxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegister
</UL>

<P><STRONG><a name="[91]"></a>clicmd_SPIxRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_SPIxRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_SPIxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[258]"></a>clicmd_SPIxRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_SPIxRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_SPIxRegisterUsage &rArr; clicmd_SPIxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegisterHelp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SPIxRegister
</UL>

<P><STRONG><a name="[226]"></a>clicmd_ShowCiA402Dashboard</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, clicmd.o(i.clicmd_ShowCiA402Dashboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_ShowCiA402Dashboard &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetDebugCounter
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetState
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_CiA402
</UL>

<P><STRONG><a name="[23e]"></a>clicmd_ShowEscAlInfo</STRONG> (Thumb, 3666 bytes, Stack size 64 bytes, clicmd.o(i.clicmd_ShowEscAlInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = clicmd_ShowEscAlInfo &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
</UL>

<P><STRONG><a name="[241]"></a>clicmd_ShowEscDcInfo</STRONG> (Thumb, 4026 bytes, Stack size 88 bytes, clicmd.o(i.clicmd_ShowEscDcInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = clicmd_ShowEscDcInfo &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
</UL>

<P><STRONG><a name="[23d]"></a>clicmd_ShowEscFeatures</STRONG> (Thumb, 2102 bytes, Stack size 72 bytes, clicmd.o(i.clicmd_ShowEscFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = clicmd_ShowEscFeatures &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
</UL>

<P><STRONG><a name="[240]"></a>clicmd_ShowEscFmmuSmInfo</STRONG> (Thumb, 1854 bytes, Stack size 48 bytes, clicmd.o(i.clicmd_ShowEscFmmuSmInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = clicmd_ShowEscFmmuSmInfo &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
</UL>

<P><STRONG><a name="[23f]"></a>clicmd_ShowEscWdInfo</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_ShowEscWdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = clicmd_ShowEscWdInfo &rArr; HW_EscRead &rArr; HW_SPI_Read &rArr; HW_SPI_TransmitReceive &rArr; HW_SPI_WaitFlagStateUntilTimeout &rArr; printd &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EscRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_EscRegister
</UL>

<P><STRONG><a name="[24a]"></a>clicmd_ShowMcDashboard</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_ShowMcDashboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clicmd_ShowMcDashboard &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetFaultStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_McStack
</UL>

<P><STRONG><a name="[254]"></a>clicmd_ShowMemoryInHex8b</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_ShowMemoryInHex8b))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_ShowMemoryInHex8b &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiWrite
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiRead
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowTestBuffer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowPdiMemoryTestParameter
</UL>

<P><STRONG><a name="[24e]"></a>clicmd_ShowPdiMemoryTestLog</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, clicmd.o(i.clicmd_ShowPdiMemoryTestLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_ShowPdiMemoryTestLog &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GetTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
</UL>

<P><STRONG><a name="[252]"></a>clicmd_ShowPdiMemoryTestParameter</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_ShowPdiMemoryTestParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_ShowPdiMemoryTestParameter &rArr; clicmd_ShowMemoryInHex8b &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMemoryInHex8b
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
</UL>

<P><STRONG><a name="[24f]"></a>clicmd_ShowTestBuffer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, clicmd.o(i.clicmd_ShowTestBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clicmd_ShowTestBuffer &rArr; clicmd_ShowMemoryInHex8b &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMemoryInHex8b
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
</UL>

<P><STRONG><a name="[250]"></a>clicmd_ShowTestTemporaryStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, clicmd.o(i.clicmd_ShowTestTemporaryStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_ShowTestTemporaryStatus &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_PdiMemoryTest
</UL>

<P><STRONG><a name="[8a]"></a>clicmd_SpimRegister</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, clicmd.o(i.clicmd_SpimRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = clicmd_SpimRegister &rArr; SPIM_IO_Write &rArr; SPIM_WriteInPageDataByIo &rArr; spim_wait_write_done &rArr; spim_is_write_done &rArr; SPIM_ReadStatusRegister &rArr; spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Write
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_IO_Read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM_EraseBlock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegisterUsage
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegisterDisplay
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_ShowMemoryInHex8b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[25c]"></a>clicmd_SpimRegisterDisplay</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, clicmd.o(i.clicmd_SpimRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_SpimRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[8b]"></a>clicmd_SpimRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_SpimRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_SpimRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[25b]"></a>clicmd_SpimRegisterUsage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_SpimRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_SpimRegisterUsage &rArr; clicmd_SpimRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegisterHelp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SpimRegister
</UL>

<P><STRONG><a name="[84]"></a>clicmd_SysRegister</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, clicmd.o(i.clicmd_SysRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = clicmd_SysRegister &rArr; clicmd_SysRegisterUsage &rArr; clicmd_SysRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegisterUsage
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegisterDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[25e]"></a>clicmd_SysRegisterDisplay</STRONG> (Thumb, 1906 bytes, Stack size 16 bytes, clicmd.o(i.clicmd_SysRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_SysRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegister
</UL>

<P><STRONG><a name="[85]"></a>clicmd_SysRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_SysRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_SysRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[25d]"></a>clicmd_SysRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_SysRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_SysRegisterUsage &rArr; clicmd_SysRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegisterHelp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_SysRegister
</UL>

<P><STRONG><a name="[82]"></a>clicmd_SystemReboot</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, clicmd.o(i.clicmd_SystemReboot))
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>clicmd_SystemRebootHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_SystemRebootHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_SystemRebootHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>clicmd_TMRxRegister</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_TMRxRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = clicmd_TMRxRegister &rArr; clicmd_TMRxRegisterDisplay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterUsage
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[260]"></a>clicmd_TMRxRegisterDisplay</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_TMRxRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_TMRxRegisterDisplay &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegister
</UL>

<P><STRONG><a name="[8f]"></a>clicmd_TMRxRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_TMRxRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_TMRxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[25f]"></a>clicmd_TMRxRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_TMRxRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_TMRxRegisterUsage &rArr; clicmd_TMRxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegisterHelp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_TMRxRegister
</UL>

<P><STRONG><a name="[8c]"></a>clicmd_UARTxRegister</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, clicmd.o(i.clicmd_UARTxRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clicmd_UARTxRegister &rArr; clicmd_UARTxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Long
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_HexText2Char
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegisterUsage
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegisterDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[262]"></a>clicmd_UARTxRegisterDisplay</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, clicmd.o(i.clicmd_UARTxRegisterDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clicmd_UARTxRegisterDisplay &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegister
</UL>

<P><STRONG><a name="[8d]"></a>clicmd_UARTxRegisterHelp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_UARTxRegisterHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clicmd_UARTxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegisterUsage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clicmd.o(.data)
</UL>
<P><STRONG><a name="[261]"></a>clicmd_UARTxRegisterUsage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clicmd.o(i.clicmd_UARTxRegisterUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clicmd_UARTxRegisterUsage &rArr; clicmd_UARTxRegisterHelp &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegisterHelp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clicmd_UARTxRegister
</UL>

<P><STRONG><a name="[263]"></a>console_AddCommandHistory</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, console.o(i.console_AddCommandHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = console_AddCommandHistory &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CollectCommand
</UL>

<P><STRONG><a name="[12a]"></a>console_Authenticate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, console.o(i.console_Authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = console_Authenticate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Task
</UL>

<P><STRONG><a name="[12c]"></a>console_ChangePasswd</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, console.o(i.console_ChangePasswd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = console_ChangePasswd &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Task
</UL>

<P><STRONG><a name="[264]"></a>console_ClearLine</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, console.o(i.console_ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = console_ClearLine &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CollectCommand
</UL>

<P><STRONG><a name="[265]"></a>console_CmdExecute</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, console.o(i.console_CmdExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = console_CmdExecute &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CommandProcess
</UL>

<P><STRONG><a name="[129]"></a>console_CollectCommand</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, console.o(i.console_CollectCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = console_CollectCommand &rArr; console_EscapeSequenceProcess &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_PutString
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_EscapeSequenceProcess
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ClearLine
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_AddCommandHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Task
</UL>

<P><STRONG><a name="[12b]"></a>console_CommandProcess</STRONG> (Thumb, 66 bytes, Stack size 144 bytes, console.o(i.console_CommandProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = console_CommandProcess &rArr; console_CmdExecute &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ParseLine
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_HelpMessage
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CmdExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Task
</UL>

<P><STRONG><a name="[266]"></a>console_EscapeSequenceProcess</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, console.o(i.console_EscapeSequenceProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = console_EscapeSequenceProcess &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_PutString
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_GetCommandHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CollectCommand
</UL>

<P><STRONG><a name="[26a]"></a>console_GetCommandHistory</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, console.o(i.console_GetCommandHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = console_GetCommandHistory
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_EscapeSequenceProcess
</UL>

<P><STRONG><a name="[268]"></a>console_HelpMessage</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, console.o(i.console_HelpMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = console_HelpMessage &rArr; CONSOLE_PutMessage &rArr; console_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CommandProcess
</UL>

<P><STRONG><a name="[122]"></a>console_LoadUserAccount</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, console.o(i.console_LoadUserAccount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = console_LoadUserAccount
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_Init
</UL>

<P><STRONG><a name="[269]"></a>console_ParseLine</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, console.o(i.console_ParseLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = console_ParseLine
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CommandProcess
</UL>

<P><STRONG><a name="[127]"></a>console_PutString</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, console.o(i.console_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = console_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_EscapeSequenceProcess
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_CollectCommand
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_ClearLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CONSOLE_PutMessage
</UL>

<P><STRONG><a name="[278]"></a>printd_PutString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, printd.o(i.printd_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = printd_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printd
</UL>

<P><STRONG><a name="[221]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[224]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[223]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
